name: Release Management

on:
  push:
    tags:
      - 'v*.*.*'
      - 'release-*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'
      create_release:
        description: 'Create GitHub release'
        required: true
        default: true
        type: boolean

env:
  NODE_VERSION: '20'
  FIREBASE_PROJECT_ID: 'keesha-10560'

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event.inputs.create_release == 'true'
    
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      release_url: ${{ steps.create_release.outputs.html_url }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" == "push" ]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION="${{ github.event.inputs.version }}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"
          
      - name: Generate changelog
        id: changelog
        run: |
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --pretty=format:"- %s (%h)" --since="30 days ago")
          else
            COMMITS=$(git log --pretty=format:"- %s (%h)" $LAST_TAG..HEAD)
          fi
          
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "## What's Changed" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          release_name: Release ${{ steps.get_version.outputs.version }}
          body: |
            # Keesha Expense Tracker ${{ steps.get_version.outputs.version }}
            
            ${{ steps.changelog.outputs.changelog }}
            
            ## Deployment
            - üåê Live URL: https://${{ env.FIREBASE_PROJECT_ID }}.web.app
            - üì± PWA ready for mobile installation
            
            ## Technical Details
            - Built with React + TypeScript
            - Firebase backend with real-time sync
            - Responsive design for all devices
            
          draft: false
          prerelease: ${{ contains(steps.get_version.outputs.version, 'beta') || contains(steps.get_version.outputs.version, 'alpha') }}

  deploy_release:
    name: Deploy Release
    runs-on: ubuntu-latest
    needs: release
    environment: 
      name: production
      url: https://keesha-10560.web.app
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit
        
      - name: Build release
        run: npm run build
        env:
          CI: true
          GENERATE_SOURCEMAP: false
          REACT_APP_VERSION: ${{ needs.release.outputs.version }}
          REACT_APP_ENV: production
          
      - name: Deploy to Firebase
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEESHA_10560 }}
          channelId: live
          projectId: ${{ env.FIREBASE_PROJECT_ID }}
          
      - name: Update release with deployment info
        uses: actions/github-script@v7
        with:
          script: |
            const release = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: '${{ needs.release.outputs.version }}'
            });
            
            const updatedBody = release.data.body + `
            
            ## ‚úÖ Deployment Status
            - **Status**: Successfully deployed
            - **URL**: https://${{ env.FIREBASE_PROJECT_ID }}.web.app
            - **Deployed at**: ${new Date().toISOString()}
            `;
            
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.data.id,
              body: updatedBody
            });
