name: Maintenance and Monitoring

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      task:
        description: 'Maintenance task to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - security-audit
          - dependency-update
          - performance-check
          - backup-check

env:
  NODE_VERSION: '20'
  FIREBASE_PROJECT_ID: 'keesha-10560'

jobs:
  security_audit:
    name: Security Audit
    runs-on: ubuntu-latest
    if: github.event.inputs.task == 'security-audit' || github.event.inputs.task == 'all' || github.event_name == 'schedule'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run npm audit
        id: audit
        run: |
          npm audit --audit-level=moderate --json > audit-results.json || true
          cat audit-results.json
          
      - name: Check for vulnerabilities
        run: |
          VULNERABILITIES=$(jq '.metadata.vulnerabilities.total' audit-results.json)
          if [ "$VULNERABILITIES" -gt "0" ]; then
            echo "::warning::Found $VULNERABILITIES security vulnerabilities"
            echo "vulnerability_count=$VULNERABILITIES" >> $GITHUB_OUTPUT
          else
            echo "No security vulnerabilities found"
            echo "vulnerability_count=0" >> $GITHUB_OUTPUT
          fi
          
      - name: Upload audit results
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-results
          path: audit-results.json
          retention-days: 30

  dependency_check:
    name: Dependency Updates Check
    runs-on: ubuntu-latest
    if: github.event.inputs.task == 'dependency-update' || github.event.inputs.task == 'all' || github.event_name == 'schedule'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Check for outdated dependencies
        run: |
          npm outdated --json > outdated.json || true
          echo "Outdated dependencies:"
          cat outdated.json | jq -r 'to_entries[] | "\(.key): \(.value.current) -> \(.value.latest)"'
          
      - name: Create dependency update issue
        if: github.event_name == 'schedule'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let outdated = {};
            
            try {
              const outdatedData = fs.readFileSync('outdated.json', 'utf8');
              outdated = JSON.parse(outdatedData);
            } catch (e) {
              console.log('No outdated dependencies found');
              return;
            }
            
            if (Object.keys(outdated).length === 0) return;
            
            const dependencies = Object.entries(outdated)
              .map(([name, info]) => `- \`${name}\`: ${info.current} ‚Üí ${info.latest}`)
              .join('\n');
              
            const issueBody = `## üì¶ Dependency Updates Available
            
            The following dependencies have updates available:
            
            ${dependencies}
            
            ### Recommended Actions:
            1. Review the changelog for each dependency
            2. Test updates in a separate branch
            3. Update dependencies incrementally
            4. Run full test suite after updates
            
            **Auto-generated by maintenance workflow**`;
            
            // Check if issue already exists
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'dependencies'
            });
            
            const existingIssue = issues.find(issue => 
              issue.title.includes('Dependency Updates Available')
            );
            
            if (!existingIssue) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: 'üì¶ Dependency Updates Available',
                body: issueBody,
                labels: ['dependencies', 'maintenance']
              });
            }

  performance_check:
    name: Performance Check
    runs-on: ubuntu-latest
    if: github.event.inputs.task == 'performance-check' || github.event.inputs.task == 'all' || github.event_name == 'schedule'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        env:
          CI: true
          GENERATE_SOURCEMAP: false
          
      - name: Analyze bundle size
        run: |
          echo "Bundle size analysis:"
          du -sh build/*
          find build/static -name "*.js" -exec ls -la {} \;
          
      - name: Check build size
        run: |
          BUILD_SIZE=$(du -sb build | cut -f1)
          MAX_SIZE=$((10 * 1024 * 1024))  # 10MB
          
          if [ $BUILD_SIZE -gt $MAX_SIZE ]; then
            echo "::warning::Build size ($BUILD_SIZE bytes) exceeds recommended maximum (${MAX_SIZE} bytes)"
          else
            echo "‚úÖ Build size is within acceptable limits: $BUILD_SIZE bytes"
          fi

  backup_verification:
    name: Backup Verification
    runs-on: ubuntu-latest
    if: github.event.inputs.task == 'backup-check' || github.event.inputs.task == 'all' || github.event_name == 'schedule'
    
    steps:
      - name: Verify Firebase project access
        run: |
          echo "Checking Firebase project access..."
          # This would typically involve Firebase CLI commands
          # For now, we'll just verify the environment variables
          if [ -z "${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEESHA_10560 }}" ]; then
            echo "::error::Firebase service account secret not found"
            exit 1
          else
            echo "‚úÖ Firebase service account configured"
          fi
          
      - name: Check GitHub repository settings
        uses: actions/github-script@v7
        with:
          script: |
            const { data: repo } = await github.rest.repos.get({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            
            console.log('Repository backup settings:');
            console.log(`- Default branch: ${repo.default_branch}`);
            console.log(`- Branch protection: ${repo.protected_branches || 'Not configured'}`);
            console.log(`- Last push: ${repo.pushed_at}`);
            
            // Check if main/master branch has protection rules
            try {
              const { data: protection } = await github.rest.repos.getBranchProtection({
                owner: context.repo.owner,
                repo: context.repo.repo,
                branch: repo.default_branch
              });
              console.log('‚úÖ Branch protection is enabled');
            } catch (error) {
              console.log('‚ö†Ô∏è Branch protection not configured');
            }
